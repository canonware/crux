#!@PYTHON@@python_opts@
#
# Find .pxd/.py/.h dependencies for a .pyx/.pxd via minimalistic parsing.

import optparse
import os
import re
import sys

class CydepHelpFormatter(optparse.IndentedHelpFormatter):
    def format_usage(self, usage):
        return """cydep usage:
    cydep -h | --help
    cydep [<options>]

    Option               | Description
    ---------------------+-----------------------------------------------
    -h | --help          | Print usage and exit.
    -I <dir>             | Add <dir> to C include path.
    -P <dir>             | Add <dir> to Python module path.
    --infile=<file>      | Find dependencies for <file>.
    --targetfile=<file>  | Build target <file>.
    --depfile=<file>     | Write dependencies to <file>.

cydep generates transitive .pxd dependencies, and non-transitive .py/.h
dependencies.  Process each source file individually whenever it is
modified, and provide all the dependencies to 'make'.
"""

# Process the command line.
def parse_options():
    helpformatter = CydepHelpFormatter()
    parser = optparse.OptionParser(formatter=helpformatter, add_help_option=0)
    parser.disable_interspersed_args()
    parser.add_option("-h", "--help", dest="help", action="store_true",
      default=False)
    parser.add_option("-I", dest="ipath", action="append", default=[])
    parser.add_option("-P", dest="ppath", action="append", default=[])
    parser.add_option("--infile", dest="infiles", action="append", default=[])
    parser.add_option("--targetfile", dest="targetfile", default="<target>")
    parser.add_option("--depfile", dest="depfile", default=None)

    (opts, rem) = parser.parse_args()
    if len(rem) > 0:
        print >> sys.stderr, "cydep: Invalid argument%s: %r" % \
          (("" if len(rem) == 1 else "s"), rem)
        CydepHelpFormatter().format_usage("")
        sys.exit(1)

    if opts.help:
        print helpformatter.format_usage("")
        sys.exit(0)

    return opts

def resolve_import(import_, indir, ppath, templates):
    relative = False

    elms = import_.split(".")
    if elms[0] == "":
        # Explicit relative import.
        relative = True
        elms.pop(0)
        for i in xrange(len(elms)):
            if elms[i] != "":
                break
            elms[i] = ".."

    # Try relative import.
    for template in templates:
        path = template % (os.path.join(*([indir] + elms)))
        if os.path.exists(path):
            return path

    if relative:
        print >> sys.stderr, "Unresolvable relative import: %r" % import_
        sys.exit(1)

    # Search ppath for the module.
    for p in opts.ppath:
        for template in templates:
            path = template % (os.path.join(*([p] + elms)))
            if os.path.exists(path):
                return path

    return None

def merge_input(inputs, cimport, indir, ppath):
    path = resolve_import(cimport, indir, ppath, ("%s.pxd", "%s/__init__.pxd"))
    if path is None:
        return

    for (f, fname, indir) in inputs:
        if fname == path:
            return
    inputs.append((open(path, 'r'), path, os.path.dirname(path)))

#
# Beginning of main execution.
#

# Parse command line options.
opts = parse_options()

# Prepare inputs.
if len(opts.infiles) != 0:
    inputs = []
    for infile in opts.infiles:
        inputs.append((open(infile, 'r'), infile, os.path.dirname(infile)))
else:
    inputs = [(sys.stdin, "<stdin>", ".")]

includes = set()
cimports = set()
imports = set()

input = 0
while input < len(inputs):
    (f, fname, indir) = inputs[input]
    input += 1

    lines = f.readlines()

    # Pre-process input to combine lines with multi-line statements/strings.
    reCont = re.compile(r"^(.*)\\$")
    i = 0
    while i < len(lines):
        # Merge multi-line """...""" strings.
        while len(lines[i].split('"""')) % 2 == 0:
            lines[i] = lines[i] + lines[i+1]
            lines.pop(i+1)

        # Merge multi-line '''...''' strings.
        while len(lines[i].split("'''")) % 2 == 0:
            lines[i] = lines[i] + lines[i+1]
            lines.pop(i+1)

        # Merge \-continued lines.
        m = reCont.match(lines[i])
        if m:
            lines[i] = m.group(1) + lines[i+1]
            lines.pop(i+1)
        else:
            i += 1

    #
    # Look for statements that induce file dependencies.
    #
    for line in lines:
        # cdef extern from "spam.h":
        m = re.compile(r'^\s*cdef\s+extern\s+from\s+"([^"]*)"\s*:').match(line)
        if m:
            includes.add((m.group(1), indir))
            continue

        # cimport .Spam
        # cimport Spam
        # cimport Spam.Ham
        # cimport Spam, Ham
        m = re.compile(r"^\s*cimport\s+([A-Za-z_.][A-Za-z0-9_.]*)(.*)$").\
          match(line)
        if m:
            if (m.group(1), indir) not in cimports:
                merge_input(inputs, m.group(1), indir, opts.ppath)
            cimports.add((m.group(1), indir))
            rem = m.group(2)
            m = re.compile(r"\s*,\s*([A-Za-z_.][A-Za-z0-9_.]*)(.*)$").match(rem)
            while m:
                if (m.group(1), indir) not in cimports:
                    merge_input(inputs, m.group(1), indir, opts.ppath)
                cimports.add((m.group(1), indir))
                rem = m.group(2)
                m = re.compile(r"\s*,\s*([A-Za-z_.][A-Za-z0-9_.]*)(.*)$").\
                  match(rem)
            continue

        # from Spam cimport <...>
        m = re.compile(r"^\s*from\s+([A-Za-z_.][A-Za-z0-9_.]*)\s+cimport\s").\
          match(line)
        if m:
            if (m.group(1), indir) not in cimports:
                merge_input(inputs, m.group(1), indir, opts.ppath)
            cimports.add((m.group(1), indir))
            continue

        # import .Spam
        # import Spam
        # import Spam.Ham
        # import Spam, Ham
        m = re.compile(r"^\s*import\s+([A-Za-z_.][A-Za-z0-9_.]*)(.*)$").\
          match(line)
        if m:
            imports.add((m.group(1), indir))
            rem = m.group(2)
            m = re.compile(r"\s*,\s*([A-Za-z_.][A-Za-z0-9_.]*)(.*)$").match(rem)
            while m:
                imports.add((m.group(1), indir))
                rem = m.group(2)
                m = re.compile(r"\s*,\s*([A-Za-z_.][A-Za-z0-9_.]*)(.*)$").\
                  match(rem)
            continue
        # from ..Spam import <...>
        m = re.compile(r"^\s*from\s+([A-Za-z_.][A-Za-z0-9_.]*)\s+import\s").\
          match(line)
        if m:
            imports.add((m.group(1), indir))
            continue

# Prepare depfile.
if opts.depfile is not None:
    try:
        os.makedirs(os.path.dirname(opts.depfile))
    except os.error:
        pass
    depfile = open(opts.depfile, "w+")
else:
    depfile = sys.stdout
    opts.depfile = "<stdout>"

deps = set()
for (f, fname, indir) in inputs:
    deps.add(os.path.normpath(fname))

# Resolve #include dependencies.
for (i, indir) in includes:
    for p in opts.ipath:
        path = "%s/%s" % (p, i)
        if os.path.exists(path):
            deps.add(os.path.normpath(path))
            break
    else:
        depfile.write("# Unresolvable: #include %r\n" % i)

# Resolve cimport dependencies.
for (i, indir) in cimports:
    path = resolve_import(i, indir, opts.ppath, ("%s.pxd", "%s/__init__.pxd"))
    if path is not None:
        deps.add(os.path.normpath(path))
    else:
        depfile.write("# Unresolvable: cimport %s\n" % i)

# Resolve import dependencies.
for (i, indir) in imports:
    path = resolve_import(i, indir, opts.ppath, ("%s.py", "%s/__init__.py"))
    if path is not None:
        deps.add(os.path.normpath(path))
    else:
        depfile.write("# Unresolvable: import %s\n" % i)

# Write out dependencies.
depfile.write("%s :" % opts.targetfile)
deps = list(deps)
deps.sort()
for dep in deps:
    depfile.write(" \\\n  %s" % dep)
depfile.write("\n")
depfile.close()
