# Clear out all vpaths, then set just one (default vpath) for the main build
# directory.
vpath
vpath % .

# Clear the default suffixes, so that built-in rules are not used.
.SUFFIXES :

SHELL := /bin/sh

CC := @CC@
FC := @FC@

# Configuration parameters.
BINDIR := @BINDIR@
DATADIR := @DATADIR@

# Build parameters.
CPPFLAGS := @CPPFLAGS@
MTCPPFLAGS := @MTCPPFLAGS@
CFLAGS := @CFLAGS@ -fPIC -DPIC
MTCFLAGS := @MTCFLAGS@
ifeq (macho, @abi@)
CFLAGS += -dynamic
endif
FCFLAGS := @FCFLAGS@ -fPIC
LDFLAGS_RUN := -L@abs_objroot@build/run/share/Crux/lib @LDFLAGS@
LDFLAGS_INST := -L@abs_objroot@build/inst/share/Crux/lib @LDFLAGS@
ifeq (@enable_sys_linalg@,0)
FCLIBS := @FCLIBS@
else
FCLIBS :=
endif
LIBS := @LIBS@ $(FCLIBS)
RPATH_EXTRA := @RPATH_EXTRA@
ifeq (macho, @abi@)
SO := dylib
else
SO := so
endif

# File lists.
CSRCS := @csrcs@
LSRCS := @lsrcs@
ifeq (@enable_sys_linalg@,0)
FSRCS := @fsrcs@
else
FSRCS :=
endif
PXDS := @pxds@
PYXS := @pyxs@
PKGS := @pkgs@
PYS := @pys@
BINS := @bins@
TESTS := @tests@

.PHONY: all dist run inst pickles install check \
	clean distclean flclean relclean

# Default target.
all: inst

# Flex-generated C files.
FLHS := $(LSRCS:%.l=%.h)
FLCS := $(LSRCS:%.l=%.c)
CSRCS += $(FLCS)

# Cython headers.
INST_SITE_PXDS := \
    $(PYXS:@srcroot@pkg/%.pyx=@objroot@build/inst/site-packages/Crux/include/%.pxd) \
    $(PKGS:@srcroot@pkg/%.pyx=@objroot@build/inst/site-packages/Crux/include/%.pxd)
RUN_PXDS := $(PYXS:@srcroot@%.pyx=@objroot@build/run/%.pxd) \
	$(PKGS:@srcroot@%.pyx=@objroot@build/run/%.pxd)
INST_PXDS := $(PYXS:@srcroot@%.pyx=@objroot@build/inst/%.pxd) \
	$(PKGS:@srcroot@%.pyx=@objroot@build/inst/%.pxd)

# Cython sources.
RUN_PYXS := $(PYXS:@srcroot@%.pyx=@objroot@build/run/%.pyx) \
	$(PKGS:@srcroot@%.pyx=@objroot@build/run/%.pyx)
INST_PYXS := $(PYXS:@srcroot@%.pyx=@objroot@build/inst/%.pyx) \
	$(PKGS:@srcroot@%.pyx=@objroot@build/inst/%.pyx)

# Python sources.
RUN_SITE_PYS := $(PYS:@srcroot@pkg/%=@objroot@build/run/site-packages/%)
INST_SITE_PYS := $(PYS:@srcroot@pkg/%=@objroot@build/inst/site-packages/%)
RUN_PYS := $(PYS:@srcroot@pkg/%=@objroot@build/run/pkg/%)
INST_PYS := $(PYS:@srcroot@pkg/%=@objroot@build/inst/pkg/%)

# Cython-generated .c files.
RUN_CYCS := $(RUN_PYXS:%.pyx=%.c)
INST_CYCS := $(INST_PYXS:%.pyx=%.c)

# Shared objects.
RUN_SOS := $(RUN_CYCS:@objroot@build/run/pkg/%.c=@objroot@build/run/site-packages/%.so)
INST_SOS := $(INST_CYCS:@objroot@build/inst/pkg/%.c=@objroot@build/inst/site-packages/%.so)

# Prevent make from deleting various intermediate files.
.SECONDARY: \
	$(INST_SITE_PXDS) $(RUN_PXDS) $(INST_PXDS) \
	$(RUN_PYXS) $(INST_PYXS) \
	$(RUN_SITE_PYS) $(INST_SITE_PYS) \
	$(RUN_PYS) $(INST_PYS) \
	$(RUN_CYCS) $(RUN_CYCS:%.c=%.o) \
	$(INST_CYCS) $(INST_CYCS:%.c=%.o) \
	$(CSRCS:@srcroot@lib/%.c=@objroot@build/lib/%.o)

# Include generated dependency files.
-include $(RUN_PYXS:%.pyx=%.d) $(INST_PYXS:%.pyx=%.d) \
	$(CSRCS:@srcroot@lib/%.c=@objroot@build/lib/%.d)

dist: $(FLHS) $(FLCS)

run: $(RUN_SOS) $(RUN_SITE_PYS) \
    $(BINS:@srcroot@bin/%=@objroot@build/run/bin/%)
	@mkdir -p @objroot@build/run/share/Crux/parsers

inst: pickles \
    $(INST_SITE_PXDS) $(INST_SOS) $(INST_SITE_PYS) \
    $(BINS:@srcroot@bin/%=@objroot@build/inst/bin/%)

pickles: run
	@objroot@build/run/bin/crux --verbose @srcroot@pickles.cx

install: inst
	install -d $(BINDIR)
	@for b in $(BINS); do \
	echo "install -m 755 @objroot@build/inst/bin/`basename $$b` $(BINDIR)"; \
	install -m 755 @objroot@build/inst/bin/`basename $$b` $(BINDIR); \
done
	install -d $(DATADIR)/Crux/lib
	install -m 755 @objroot@build/inst/share/Crux/lib/libCx.$(SO) $(DATADIR)/Crux/lib
	install -d $(DATADIR)/Crux/parsers
	@for f in `find @abs_objroot@build/run/share/Crux/parsers -type f`; do \
	echo "install -m 644 $$f $(DATADIR)/Crux/parsers"; \
	install -m 644 $$f $(DATADIR)/Crux/parsers; \
done
	@for d in $(patsubst @objroot@build/inst/site-packages/%,@site_packages@/%,$(sort $(dir $(INST_SITE_PXDS) $(INST_SOS) $(INST_SITE_PYS)))); do \
	echo "install -d $$d"; \
	install -d $$d; \
done
	@for f in $(patsubst @objroot@build/inst/site-packages/%,%,$(INST_SITE_PXDS) $(INST_SOS) $(INST_SITE_PYS)); do \
	echo "install -m 755 @objroot@build/inst/site-packages/$$f @site_packages@/`dirname $$f`"; \
	install -m 755 @objroot@build/inst/site-packages/$$f @site_packages@/`dirname $$f`; \
done

check: run
	@mkdir -p @objroot@test
	@$(SHELL) -c 'total=0; \
		failures=0; \
		echo "========================================="; \
		for t in $(TESTS); do \
			total=`expr $$total + 1`; \
			/bin/echo -n "$$t ... "; \
			2>&1 @objroot@build/run/bin/crux @srcroot@$$t - \
			  @abs_srcroot@ @abs_objroot@ \
			  | @GREP@ -v "\[[1-9][0-9]* refs\]" \
			  > @objroot@$${t}.out; \
			if @TEST@ -e "@srcroot@$${t}.exp"; then \
				2>&1 diff -u @srcroot@$${t}.exp \
				  @objroot@$${t}.out >/dev/null; \
				fail=$$?; \
				if @TEST@ "$$fail" -eq "1" ; then \
					failures=`expr $$failures + 1`; \
					echo "*** FAIL ***"; \
				else \
					echo "pass"; \
				fi; \
			else \
				echo "*** FAIL *** (.exp file is missing)"; \
				failures=`expr $$failures + 1`; \
			fi; \
		done; \
		echo "========================================="; \
		echo "Failures: $$failures/$$total"'

clean:
	rm -rf @objroot@build/include
	rm -rf @objroot@build/lib
	rm -rf @objroot@build/run
	rm -rf @objroot@build/inst
	rm -f @objroot@test/*.out
	rm -f @objroot@test/*.log
	rm -f @objroot@test/*.pickle

distclean: clean
	rm -rf @objroot@build
	rm -f @objroot@config.log
	rm -f @objroot@config.status
	rm -f @objroot@cfghdrs.stamp
	rm -f @objroot@cfgoutputs.stamp
	rm -f @cfghdrs@
	rm -f @cfgoutputs@

flclean:
ifeq (@enable_flex@, 1)
	rm -f $(FLHS)
	rm -f $(FLCS)
endif

relclean: distclean flclean
	rm -rf @objroot@autom4te.cache
	rm -f @objroot@configure

#===============================================================================
# Handle SFMT compilation specially.
@objroot@build/lib/SFMT/%.o : @srcroot@lib/SFMT/%.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) $(MTCFLAGS) $(CPPFLAGS) $(MTCPPFLAGS) $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(sort $(patsubst %,-I%,$(dir $(CSRCS:@srcroot@lib/%=@objroot@lib/%)))) -c $< -o$@
	@$(SHELL) -ec "$(CC) -MM $(CPPFLAGS) $(MTCPPFLAGS) $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(sort $(patsubst %,-I%,$(dir $(CSRCS:@srcroot@lib/%=@objroot@lib/%)))) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o \2/g\" > $(@:%.o=%.d)"

@objroot@build/lib/%.o : @srcroot@lib/%.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(sort $(patsubst %,-I%,$(dir $(CSRCS:@srcroot@lib/%=@objroot@lib/%)))) -c $< -o$@
	@$(SHELL) -ec "$(CC) -MM $(CPPFLAGS) $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(sort $(patsubst %,-I%,$(dir $(CSRCS:@srcroot@lib/%=@objroot@lib/%)))) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o \2/g\" > $(@:%.o=%.d)"

#===============================================================================
@objroot@build/lib/%.o : @srcroot@lib/%.f
	@mkdir -p $(@D)
	$(FC) $(FCFLAGS) -c $< -o $@

#===============================================================================
@objroot@build/run/share/Crux/lib/libCx.$(SO) : \
		$(CSRCS:@srcroot@lib/%.c=@objroot@build/lib/%.o) \
		$(FSRCS:@srcroot@lib/%.f=@objroot@build/lib/%.o)
	@mkdir -p $(@D)
ifeq (elf, @abi@)
ifneq ($(words "" @RPATH@), 1)
	$(CC) -shared @RPATH@@abs_objroot@build/run/share/Crux/lib $(RPATH_EXTRA:%=@RPATH@%) -Wl,-soname,libCx.$(SO) -o $@ $^ $(LDFLAGS_RUN) $(LIBS)
else
	$(CC) -shared -Wl,-soname,libCx.$(SO) -o $@ $^ $(LDFLAGS_RUN) $(LIBS)
endif
endif
ifeq (macho, @abi@)
	$(CC) -dynamiclib -install_name @abs_objroot@build/run/share/Crux/lib/libCx.$(SO) -o $@ $^ $(LDFLAGS_RUN) $(LIBS)
endif

@objroot@build/inst/share/Crux/lib/libCx.$(SO) : \
		$(CSRCS:@srcroot@lib/%.c=@objroot@build/lib/%.o) \
		$(FSRCS:@srcroot@lib/%.f=@objroot@build/lib/%.o)
	@mkdir -p $(@D)
ifeq (elf, @abi@)
ifneq ($(words "" @RPATH@), 1)
	$(CC) -shared @RPATH@$(DATADIR)/Crux/lib $(RPATH_EXTRA:%=@RPATH@%) -Wl,-soname,libCx.$(SO) -o $@ $^ $(LDFLAGS_INST) $(LIBS)
else
	$(CC) -shared -Wl,-soname,libCx.$(SO) -o $@ $^ $(LDFLAGS_INST) $(LIBS)
endif
endif
ifeq (macho, @abi@)
	$(CC) -dynamiclib -install_name $(DATADIR)/Crux/lib/libCx.$(SO) -o $@ $^ $(LDFLAGS_INST) $(LIBS)
endif

#===============================================================================
# Flex-generated files are shipped with releases, so the following rule is not
# always needed.
ifeq (@enable_flex@, 1)
@srcroot@%.c @srcroot@%.h : @srcroot@%.l
	@FLEX@ -CFa -8 --header-file=$(<:%.l=%.h) -o $(<:%.l=%.c) $<
endif

#===============================================================================
@objroot@build/inst/site-packages/Crux/include/%.pxd : @srcroot@pkg/%.pxd
	@mkdir -p $(@D)
	@abs_objroot@cfg -i --infile=$< --outfile=$@

@objroot@build/run/pkg/%.pxd : @srcroot@pkg/%.pxd
	@mkdir -p $(@D)
	@abs_objroot@cfg -r --infile=$< --outfile=$@

@objroot@build/inst/pkg/%.pxd : @srcroot@pkg/%.pxd
	@mkdir -p $(@D)
	@abs_objroot@cfg -i --infile=$< --outfile=$@

@objroot@build/run/pkg/%.pyx : @srcroot@pkg/%.pyx
	@mkdir -p $(@D)
	@abs_objroot@cfg -r --infile=$< --outfile=$@

@objroot@build/inst/pkg/%.pyx : @srcroot@pkg/%.pyx
	@mkdir -p $(@D)
	@abs_objroot@cfg -i --infile=$< --outfile=$@

@objroot@build/run/pkg/%.py : @srcroot@pkg/%.py
	@mkdir -p $(@D)
	@abs_objroot@cfg -r --infile=$< --outfile=$@

@objroot@build/inst/pkg/%.py : @srcroot@pkg/%.py
	@mkdir -p $(@D)
	@abs_objroot@cfg -i --infile=$< --outfile=$@

#===============================================================================
# If using the contrib Cython, add a dependency that causes it to be copied to
# build/contrib/cython before any compilation takes place.
@objroot@build/contrib/cython/bin/cython :
	@mkdir -p @objroot@build/contrib
	cp -R @srcroot@contrib/cython @objroot@build/contrib

ifeq (@CYTHON@,@abs_objroot@cython)
@CYTHON@ : @objroot@build/contrib/cython/bin/cython
else
@CYTHON@ :
endif

#===============================================================================
# The order-only prerequisites are necessary in order to assure that:
#
# 1) The .pxd files are in place, so that Cython can use them during
#    compilation.
# 2) The package __init__.py files are in place, so that directories are
#    considered packages for the purposes of import/cimport.
@objroot@build/run/pkg/%.c : @objroot@build/run/pkg/%.pyx \
			@objroot@build/run/pkg/%.pxd \
			| $(RUN_PXDS) $(RUN_PYS) @CYTHON@
	@PYTHON@ @CYTHON@ --directive embedsignature=True -I@objroot@build/run/pkg $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(patsubst %,-I%,@mpi4py_includes@) @python_config_includes@ -o $@ $<
	@@abs_objroot@cydep $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(sort $(patsubst %,-I%,$(dir $(CSRCS:@srcroot@lib/%=@objroot@lib/%)))) -I/usr/include $(filter -I%,$(CPPFLAGS)) @python_config_includes@ -P@objroot@build/run/pkg $(sort $(patsubst %,-P%,$(dir $(CSRCS)))) $(patsubst %,-P%,@mpi4py_includes@) $(patsubst %,--infile=%,$^) --targetfile=$@ --depfile=$(@:%.c=%.d)

@objroot@build/inst/pkg/%.c : @objroot@build/inst/pkg/%.pyx \
			@objroot@build/inst/pkg/%.pxd \
			| $(INST_PXDS) $(INST_PYS) @CYTHON@
	@PYTHON@ @CYTHON@ --directive embedsignature=True -I@objroot@build/inst/pkg $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(patsubst %,-I%,@mpi4py_includes@) @python_config_includes@ -o $@ $<
	@@abs_objroot@cydep $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(sort $(patsubst %,-I%,$(dir $(CSRCS:@srcroot@lib/%=@objroot@lib/%)))) -I/usr/include $(filter -I%,$(CPPFLAGS)) @python_config_includes@ -P@objroot@build/inst/pkg $(sort $(patsubst %,-P%,$(dir $(CSRCS)))) $(patsubst %,-P%,@mpi4py_includes@) $(patsubst %,--infile=%,$^) --targetfile=$@ --depfile=$(@:%.c=%.d)

#===============================================================================
@objroot@build/run/pkg/%.o : @objroot@build/run/pkg/%.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(sort $(patsubst %,-I%,$(dir $(CSRCS:@srcroot@lib/%=@objroot@lib/%)))) @python_config_cflags@ -c $< -o$@

@objroot@build/inst/pkg/%.o : @objroot@build/inst/pkg/%.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(sort $(patsubst %,-I%,$(dir $(CSRCS:@srcroot@lib/%=@objroot@lib/%)))) @python_config_cflags@ -c $< -o$@

#===============================================================================
# Rules for building packages/modules that link against libCx.  These rules
# must come before the more generic rules that follow.
@objroot@build/run/site-packages/Crux/%.so : @objroot@build/run/pkg/Crux/%.o \
				@objroot@build/run/share/Crux/lib/libCx.$(SO)
	@mkdir -p $(@D)
ifeq (elf, @abi@)
ifneq ($(words "" @RPATH@), 1)
	$(CC) -shared @RPATH@@abs_objroot@build/run/share/Crux/lib $(RPATH_EXTRA:%=@RPATH@%) $(LDFLAGS_RUN) @python_config_ldflags@ -o $@ $^ $(LIBS)
else
	$(CC) -shared $(LDFLAGS_RUN) @python_config_ldflags@ -o $@ $^ $(LIBS)
endif
endif
ifeq (macho, @abi@)
	$(CC) -dynamiclib $(LDFLAGS_RUN) @python_config_ldflags@ -o $@ $^ $(LIBS)
endif

@objroot@build/inst/site-packages/Crux/%.so : @objroot@build/inst/pkg/Crux/%.o \
				@objroot@build/inst/share/Crux/lib/libCx.$(SO)
	@mkdir -p $(@D)
ifeq (elf, @abi@)
ifneq ($(words "" @RPATH@), 1)
	$(CC) -shared @RPATH@$(DATADIR)/Crux/lib $(RPATH_EXTRA:%=@RPATH@%) $(LDFLAGS_INST) @python_config_ldflags@ -o $@ $^ $(LIBS)
else
	$(CC) -shared $(LDFLAGS_INST) @python_config_ldflags@ -o $@ $^ $(LIBS)
endif
endif
ifeq (macho, @abi@)
	$(CC) -dynamiclib $(LDFLAGS_INST) @python_config_ldflags@ -o $@ $^ $(LIBS)
endif

#===============================================================================
@objroot@build/run/site-packages/%.so : @objroot@build/run/pkg/%.o
	@mkdir -p $(@D)
ifeq (elf, @abi@)
	$(CC) -shared $(LDFLAGS_RUN) @python_config_ldflags@ -o $@ $^ $(LIBS)
endif
ifeq (macho, @abi@)
	$(CC) -dynamiclib $(LDFLAGS_RUN) @python_config_ldflags@ -o $@ $^ $(LIBS)
endif

@objroot@build/inst/site-packages/%.so : @objroot@build/inst/pkg/%.o
	@mkdir -p $(@D)
ifeq (elf, @abi@)
	$(CC) -shared $(LDFLAGS_INST) @python_config_ldflags@ -o $@ $^ $(LIBS)
endif
ifeq (macho, @abi@)
	$(CC) -dynamiclib $(LDFLAGS_INST) @python_config_ldflags@ -o $@ $^ $(LIBS)
endif

#===============================================================================
@objroot@build/run/site-packages/%.py : @srcroot@pkg/%.py
	@mkdir -p $(@D)
	@abs_objroot@cfg -r --infile=$< --outfile=$@

@objroot@build/inst/site-packages/%.py : @srcroot@pkg/%.py
	@mkdir -p $(@D)
	@abs_objroot@cfg -i --infile=$< --outfile=$@

#===============================================================================
@objroot@build/run/bin/% : @srcroot@bin/%
	@mkdir -p $(@D)
	@abs_objroot@cfg -r --infile=$< --outfile=$@

@objroot@build/inst/bin/% : @srcroot@bin/%
	@mkdir -p $(@D)
	@abs_objroot@cfg -i --infile=$< --outfile=$@

#===============================================================================
# Re-configuration rules.

ifeq (@enable_autogen@, 1)
@srcroot@configure : @srcroot@configure.ac
	cd ./@srcroot@ && @AUTOCONF@

@objroot@config.status : @srcroot@configure
	./@objroot@config.status --recheck

# cfghdrs rules.
@srcroot@cfghdrs.stamp.in : @srcroot@configure.ac
	echo stamp > @srcroot@cfghdrs.stamp.in

@objroot@cfghdrs.stamp : $(patsubst %, %.in, @cfghdrs@) \
			 @srcroot@configure
	./@objroot@config.status
	@touch $@

@cfghdrs@ : @objroot@cfghdrs.stamp

# cfgoutputs rules.
@srcroot@cfgoutputs.stamp.in : @srcroot@configure.ac
	echo stamp > @srcroot@cfgoutputs.stamp.in

@objroot@cfgoutputs.stamp : $(patsubst %, @srcroot@%.in, @cfgoutputs@) \
			    @srcroot@configure
	./@objroot@config.status
	@touch $@

$(INST_SITE_PXDS) $(RUN_PXDS) $(INST_PXDS) \
$(RUN_PYXS) $(INST_PYXS) \
$(RUN_SITE_PYS) $(INST_SITE_PYS) \
$(RUN_PYS) $(INST_PYS): @objroot@cfgoutputs.stamp

# There must be some action in order for make to re-read Makefile when it is
# out of date.
@cfgoutputs@ : @objroot@cfgoutputs.stamp
	@true
endif
