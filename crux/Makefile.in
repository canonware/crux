################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Crux <Version = crux>
#
# Makefile.in
#
################################################################################

# Clear out all vpaths, then set just one (default vpath) for the main build
# directory.
vpath
vpath % .

# Clear the default suffixes, so that built-in rules are not used.
.SUFFIXES :

SHELL := /bin/sh

# Build parameters.
CPPFLAGS := @CPPFLAGS@
CFLAGS := @CFLAGS@ -fPIC -DPIC
ifeq (macho, @abi@)
CFLAGS += -dynamic
endif
LDFLAGS := @LDFLAGS@

# File lists.
CHDRS := @chdrs@
CSRCS := @csrcs@
PXDS := @pxds@
PYXS := @pyxs@
PKGS := @pkgs@
PYS := @pys@
BINS := @bins@
TESTS := @tests@

# Default target.
all: installable

# Cython-generated .c files.
CYCS := $(PYXS:%.pyx=%.c) $(PKGS:%.pyx=%.c)

# Include generated dependency files.
-include $(CYCS:@srcroot@pkg/%.c=@objroot@build/pkg/%.d) \
	$(CSRCS:@srcroot@lib/%.c=@objroot@build/lib/%.d)

dist: $(CYCS)

runnable: @objroot@build/run/bin/crux

installable: @objroot@build/inst/bin/crux pickles

pickles: runnable
	@mkdir -p @objroot@build/run/share/Crux/parsers
	@objroot@build/run/bin/crux --batch --infile=@srcroot@pickles.crux

install: installable
	install -d @BINDIR@
	install -m 755 @objroot@build/inst/bin/crux @BINDIR@
	install -d @DATADIR@/Crux/lib
	install -m 755 @objroot@build/inst/share/Crux/lib/libCx.so @DATADIR@/Crux/lib
	install -d @DATADIR@/Crux/parsers
	@for f in `find @abs_objroot@build/run/share/Crux/parsers -type f`; do \
	echo "install -m 644 $$f @DATADIR@/Crux/parsers"; \
	install -m 644 $$f @DATADIR@/Crux/parsers; \
done
	@for d in $(patsubst @objroot@build/inst/site-packages/%,@site_packages@/%,$(sort $(dir $(CYCS:@srcroot@pkg/%.c=@objroot@build/inst/site-packages/%.so) $(PYS:@srcroot@pkg/%=@objroot@build/inst/site-packages/%)))); do \
	echo "install -d $$d"; \
	install -d $$d; \
done
	@for f in $(patsubst @objroot@build/inst/site-packages/%,%,$(CYCS:@srcroot@pkg/%.c=@objroot@build/inst/site-packages/%.so) $(PYS:@srcroot@pkg/%=@objroot@build/inst/site-packages/%)); do \
	echo "install -m 755 @objroot@build/inst/site-packages/$$f @site_packages@/`dirname $$f`"; \
	install -m 755 @objroot@build/inst/site-packages/$$f @site_packages@/`dirname $$f`; \
done

check: runnable
	@sh -c 'total=0; \
		failures=0; \
		@ECHO@ "========================================="; \
		for t in $(TESTS); do \
			total=`expr $$total + 1`; \
			@ECHO@ -n "$$t ... "; \
			2>&1 @objroot@build/run/bin/crux --batch --quiet \
			  --infile=$$t -- @abs_srcroot@ @abs_objroot@ \
			  | @PERL@ -pe "s/\[[1-9][0-9]* refs\]\n//g" \
			  > $${t}.out; \
			if @TEST@ -e "$${t}.exp"; then \
				2>&1 diff -u $${t}.exp $${t}.out >/dev/null; \
				fail=$$?; \
				if @TEST@ "$$fail" -eq "1" ; then \
					failures=`expr $$failures + 1`; \
					@ECHO@ "*** FAIL ***"; \
				else \
					@ECHO@ "pass"; \
				fi; \
			else \
				@ECHO@ "*** FAIL *** (.exp file is missing)"; \
				failures=`expr $$failures + 1`; \
			fi; \
		done; \
		@ECHO@ "========================================="; \
		@ECHO@ "Failures: $$failures/$$total"'

clean:
	rm -rf @objroot@build
	rm -f @objroot@test/*.out

distclean: clean
	rm -f @objroot@config.log
	rm -f @objroot@config.status
	rm -f @objroot@cfghdrs.stamp
	rm -f @objroot@cfgoutputs.stamp
	rm -f @cfghdrs@
	rm -f @cfgoutputs@

cyclean:
ifeq (@enable_cython@, 1)
	rm -f $(CYCS)
endif

relclean: distclean cyclean
	rm -rf @objroot@autom4te.cache
	rm -f @objroot@configure

@objroot@build/lib/%.o : @srcroot@lib/%.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(sort $(patsubst %,-I%,$(dir $(CSRCS:@srcroot@lib/%=@objroot@build/lib/%)))) -c $< -o$@
	@$(SHELL) -ec "$(CC) -MM $(CPPFLAGS) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o \2/g\" > $(@:%.o=%.d)"

@objroot@build/run/share/Crux/lib/libCx.so : $(CSRCS:@srcroot@lib/%.c=@objroot@build/lib/%.o)
	@mkdir -p $(@D)
ifeq (elf, @abi@)
	$(CC) -shared -Wl,-soname,libCx.so -o $@ $+
endif
ifeq (macho, @abi@)
	$(CC) -undefined dynamic_lookup -dynamiclib -install_name @abs_objroot@build/run/shard/Crux/lib/libCx.so -o $@ $+
endif

@objroot@build/inst/share/Crux/lib/libCx.so : \
		$(CSRCS:@srcroot@lib/%.c=@objroot@build/lib/%.o)
	@mkdir -p $(@D)
ifeq (elf, @abi@)
	$(CC) -shared -Wl,-soname,libCx.so -o $@ $+
endif
ifeq (macho, @abi@)
	$(CC) -undefined dynamic_lookup -dynamiclib -install_name @DATADIR@/share/Crux/lib/libCx.so -o $@ $+
endif

# Cython-generated files are shipped with releases, so the following rule is
# not always needed.
ifeq (@enable_cython@, 1)
@srcroot@%.c : @srcroot@%.pyx
	@PYTHON@ @CYTHON@ -I@srcroot@pkg $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) -o $@ $<
	@@abs_objroot@cydep -I/usr/include $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(sort $(patsubst %,-I%,$(dir $(CSRCS:@srcroot@lib/%=@objroot@build/lib/%)))) -P@srcroot@src --infile=$< --outfile=$(@:@srcroot@pkg/%.c=@objroot@build/pkg/%.d)
endif

@objroot@build/pkg/%.o : @srcroot@pkg/%.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) $(sort $(patsubst %,-I%,$(dir $(CSRCS)))) $(sort $(patsubst %,-I%,$(dir $(CSRCS:@srcroot@lib/%=@objroot@build/lib/%)))) @python_config_cflags@ -c $< -o$@

@objroot@build/run/site-packages/%.so : @objroot@build/pkg/%.o \
				@objroot@build/run/share/Crux/lib/libCx.so
	@mkdir -p $(@D)
ifneq ($(words "" @RPATH@), 1)
	$(CC) -shared @RPATH@@abs_objroot@build/run/share/Crux/lib @python_config_ldflags@ -o $@ $+
else
	$(CC) -shared @python_config_ldflags@ -o $@ $+
endif

@objroot@build/inst/site-packages/%.so : @objroot@build/pkg/%.o \
				@objroot@build/inst/share/Crux/lib/libCx.so
	@mkdir -p $(@D)
ifneq ($(words "" @RPATH@), 1)
	$(CC) -shared @RPATH@@DATADIR@/Crux/lib @python_config_ldflags@ -o $@ $+
else
	$(CC) -shared @python_config_ldflags@ -o $@ $+
endif

@objroot@build/run/site-packages/%.py : @srcroot@pkg/%.py
	@mkdir -p $(@D)
	@abs_objroot@cfg -r --infile=$< --outfile=$@

@objroot@build/inst/site-packages/%.py : @srcroot@pkg/%.py
	@mkdir -p $(@D)
	@abs_objroot@cfg -i --infile=$< --outfile=$@

@objroot@build/run/bin/crux : @srcroot@bin/crux \
		$(CYCS:@srcroot@pkg/%.c=@objroot@build/run/site-packages/%.so) \
		$(PYS:@srcroot@pkg/%=@objroot@build/run/site-packages/%)
	@mkdir -p $(@D)
	@abs_objroot@cfg -r --infile=$< --outfile=$@

@objroot@build/inst/bin/crux : @srcroot@bin/crux \
		$(CYCS:@srcroot@pkg/%.c=@objroot@build/inst/site-packages/%.so) \
		$(PYS:@srcroot@pkg/%=@objroot@build/inst/site-packages/%)
	@mkdir -p $(@D)
	@abs_objroot@cfg -i --infile=$< --outfile=$@

#
# Re-configuration rules.
#
ifeq (@enable_autogen@, 1)
@srcroot@configure : @srcroot@configure.ac
	cd ./@srcroot@ && @AUTOCONF@

@objroot@config.status : @srcroot@configure
	./@objroot@config.status --recheck

# cfghdrs rules.
@srcroot@cfghdrs.stamp.in : @srcroot@configure.ac
	@ECHO@ stamp > @srcroot@cfghdrs.stamp.in

@objroot@cfghdrs.stamp : $(patsubst %, @srcroot@%.in, @cfghdrs@) \
			 @srcroot@configure
	./@objroot@config.status

@cfghdrs@ : @objroot@cfghdrs.stamp

# cfgoutputs rules.
@srcroot@cfgoutputs.stamp.in : @srcroot@configure.ac
	@ECHO@ stamp > @srcroot@cfgoutputs.stamp.in

@objroot@cfgoutputs.stamp : $(patsubst %, @srcroot@%.in, @cfgoutputs@) \
			    @srcroot@configure
	./@objroot@config.status

# There must be some action in order for make to re-read Makefile when it is
# out of date.
@cfgoutputs@ : @objroot@cfgoutputs.stamp
	@true
endif
