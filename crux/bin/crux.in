#!@PYTHON@@python_opts@

import sys
import os
import string
import time
import re
import random
import optparse

try:
    import Crux
    Crux.prefix = "@prefix@"
except:
    # Munge the module path in order to support running crux in the source tree.
    import glob
    for d in glob.glob("@abs_objroot@/build/lib*"):
        sys.path.append(d)
    import Crux
    Crux.prefix = "@abs_objroot@/build"

# Create a help formatter subclass for the command line parser.
class CruxHelpFormatter(optparse.IndentedHelpFormatter):
    def format_usage(self, usage):
        return """crux usage:
    crux -h | --help
    crux --version
    crux [<options>]

    Option               | Description
    ---------------------+-----------------------------------------------
    -h | --help          | Print usage and exit (no*).
    --version            | Print version information and exit (no*).
    --batch              | Run in batch mode (interactive*).
    --quiet              | Enable quiet output (non-quiet*).
    --seed=<int>         | Specify random number generator seed (time*).
    --infile=<file>      | Read input <file> (stdin*).
    --outfile=<file>     | Save results to <file> (stdout*).
    --logfile=<file>     | Output a copy of all output to <file> (none*).
    -- [<scriptargs>]    | Provide <scriptargs> arguments to script."""

# Process the command line.
def parse_options():
    helpformatter = CruxHelpFormatter()
    parser = optparse.OptionParser(formatter=helpformatter, add_help_option=0)
    parser.disable_interspersed_args()
    parser.add_option("-h", "--help", dest="help", action="store_true",
                      default=False)
    parser.add_option("--version", dest="version", action="store_true",
                      default=False)
    parser.add_option("--quiet", dest="quiet", action="store_true",
                      default=False)
    parser.add_option("--batch", dest="batch", action="store_true",
                      default=False)
    parser.add_option("--seed", dest="seed", type="int", default=None)
    parser.add_option("--infile", dest="infile", default=None)
    parser.add_option("--outfile", dest="outfile", default=None)
    parser.add_option("--logfile", dest="logfile", default=None)
    parser.add_option("--__execed", dest="execed", action="store_true",
                      default=False)

    (opts, scriptargs) = parser.parse_args()
    opts.scriptargs = scriptargs

    if opts.help:
        print helpformatter.format_usage("")
        sys.exit(0)

    if opts.version:
        print "Crux, version @crux_version@"
        sys.exit(0)

    return opts

#
# Beginning of main execution.
#

# Parse command line options.
Crux.opts = parse_options()

if not Crux.opts.batch and not Crux.opts.execed:
    # Precursor to interactive mode.
    #
    # In order for interactive command line editing to work in its full glory,
    # it is necessary to exec the python interpreter, such that interactive mode
    # is enabled via python's '-i' flag.
    args = sys.argv[:]
    args.insert(0, "-i")

    # Insert --__execed as the first command line argument.  Appending doesn't
    # work correctly when there are trailing script arguments.
    args.insert(2, "--__execed")

    # For some reason, PYTHONINSPECT must be set, even when '-i' is passed to
    # the python interpreter.
    os.environ['PYTHONINSPECT'] = '1'

    # Re-launch python.
    os.execv("@PYTHON@", args)
    # Not reached.

# Seed the pseudo-random number generator.
if Crux.opts.seed == None:
    Crux.opts.seed = int(time.time())
random.seed(Crux.opts.seed)

# Print various info, unless in quiet mode.
if not Crux.opts.quiet:
    print "Crux, version @crux_version@"

    print "Start batch processing, %s" \
          % time.strftime("%Y/%m/%d %H:%M:%S (%Z)",
                          time.localtime(time.time()))

    if Crux.opts.batch:
        print "Batch mode"
    else:
        print "Interactive mode"

    print "Process ID: %d" % os.getpid()

    print "Random number seed: %d" % Crux.opts.seed

    if Crux.opts.infile == None:
        print "Input file: <stdin>"
    else:
        print "Input file: '%s'" % Crux.opts.infile

    if Crux.opts.outfile == None:
        print "Output file: <stdout>"
    else:
        print "Output file: '%s'" % Crux.opts.outfile

    if Crux.opts.logfile != None:
        print "Log file: '%s'" % Crux.opts.logfile
    if len(Crux.opts.scriptargs) != 0:
        print "Script argument(s): %s" % Crux.opts.scriptargs

# Do batch processing.
if Crux.opts.infile != None:
    execfile(Crux.opts.infile)
elif Crux.opts.batch:
    exec(os.stdin)

# Print various info, unless in quiet mode.
if not Crux.opts.quiet:
    print "Stop batch processing, %s" \
          % time.strftime("%Y/%m/%d %H:%M:%S (%Z)",
                          time.localtime(time.time()))
    if not Crux.opts.batch:
        print "Interactive mode."
