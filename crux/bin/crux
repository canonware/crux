#!@PYTHON@@python_opts@

import optparse
import os
import random
import sys
import time

if "@site_packages@" not in sys.path:
    sys.path.insert(0, "@site_packages@")
import Crux

# Create a help formatter subclass for the command line parser.
class CruxHelpFormatter(optparse.IndentedHelpFormatter):
    def format_usage(self, usage):
        return """crux usage:
    crux -h | --help
    crux --version
    crux [<options>] [<infile>] [- [<scriptargs>]]

    Option               | Description
    ---------------------+------------------------------------------------------
    --help         or -h | Print usage and exit.
    --version            | Print version information and exit.
    --batch        or -b | Run in batch mode.
    --interactive  or -i | Run in interactive mode.
    --verbose      or -v | Enable verbose output.
    --quiet        or -q | Disable verbose output.
    --seed=<int>         | Specify random number generator seed.
    --infile=<infile>    | Read input from <infile>.

    Trailing argument(s) | Description
    ---------------------+------------------------------------------------------
    <infile>             | Read input from <infile> (same as --infile=<infile>).
    - [<scriptargs>]     | Provide <scriptargs> arguments to script.

crux runs interactively and verbosely by default, unless an input file is
specified, in which case crux runs in batch mode and quietly by default.
"""

# Process the command line.
def parse_options():
    helpformatter = CruxHelpFormatter()
    parser = optparse.OptionParser(formatter=helpformatter, add_help_option=0)
    parser.disable_interspersed_args()
    parser.add_option("-h", "--help", dest="help", action="store_true",
      default=False)
    parser.add_option("--version", dest="version", action="store_true",
      default=False)
    parser.add_option("-i", "--interactive", dest="batch", action="store_false")
    parser.add_option("-b", "--batch", dest="batch", action="store_true",
      default=None)
    parser.add_option("-q", "--quiet", dest="verbose", action="store_false")
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true",
      default=None)
    parser.add_option("--seed", dest="seed", type="int", default=None)
    parser.add_option("--infile", dest="infile", default=None)
    parser.add_option("--__execed", dest="execed", action="store_true",
      default=False)

    (opts, scriptargs) = parser.parse_args()
    if len(scriptargs) > 0:
        if scriptargs[0] != "-":
            opts.infile = scriptargs[0]
            scriptargs.pop(0)

        if len(scriptargs) > 0 and scriptargs[0] == "-":
            scriptargs.pop(0)
    opts.scriptargs = scriptargs

    if opts.help:
        print helpformatter.format_usage("")
        sys.exit(0)

    if opts.version:
        print "Crux, version @crux_version@"
        sys.exit(0)

    if opts.infile is None:
        # Default to interactive/verbose.
        if opts.batch is None:
            opts.batch = False
        if opts.verbose is None:
            opts.verbose = True
    else:
        # Default to batch/quiet.
        if opts.batch is None:
            opts.batch = True
        if opts.verbose is None:
            opts.verbose = False

    return opts

#
# Beginning of main execution.
#

# Parse command line options.
opts = parse_options()

# Copy configuration to Crux.Config.
Crux.Config.batch = opts.batch
Crux.Config.verbose = opts.verbose
if opts.seed is not None:
    Crux.seed(opts.seed)
Crux.Config.infile = opts.infile
Crux.Config.scriptargs = opts.scriptargs

if not Crux.Config.batch and not opts.execed:
    # Precursor to interactive mode.
    #
    # In order for interactive command line editing to work in its full glory,
    # it is necessary to exec the python interpreter, such that interactive mode
    # is enabled via python's '-i' flag.
    args = sys.argv[:]
    args.insert(0, "@PYTHON@")
    args.insert(1, "-i")

    # Insert --__execed as the first command line argument.  Appending doesn't
    # work correctly when there are trailing script arguments.
    args.insert(3, "--__execed")

    # Re-launch python.
    os.execv("@PYTHON@", args)
    # Not reached.

# Print various info if in verbose mode.
if Crux.Config.verbose:
    print "Crux, version @crux_version@"

    print "Start batch processing, %s" \
          % time.strftime("%Y/%m/%d %H:%M:%S (%Z)",
                          time.localtime(time.time()))

    if Crux.Config.batch:
        print "Batch mode"
    else:
        print "Interactive mode"

    print "Process ID: %d" % os.getpid()

    print "Random number seed: %d" % Crux.Config.seed

    if Crux.Config.infile == None:
        print "Input file: <stdin>"
    else:
        print "Input file: '%s'" % Crux.Config.infile

    if len(Crux.Config.scriptargs) != 0:
        print "Script argument(s): %s" % Crux.Config.scriptargs

# Do batch processing.
if Crux.Config.infile != None:
    execfile(Crux.Config.infile)
elif Crux.Config.batch:
    exec(sys.stdin)

# Print various info if in verbose mode.
if Crux.Config.verbose:
    print "Stop batch processing, %s" \
      % time.strftime("%Y/%m/%d %H:%M:%S (%Z)", time.localtime(time.time()))
    if not Crux.Config.batch:
        print "Interactive mode."
