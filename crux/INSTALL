=== Overview ===================================================================

This file describes how to build and install Crux.  The information is broken
into the following sections:

    === Overview
    === Required software
    === Optional software
    === Basic installation
    === Advanced configuration
    === Advanced compilation
    === Advanced installation
    === Development

In the common case, you should be able to simply verify that you have the
required software installed, then follow the basic installation instructions.

==== Required software =========================================================

Building Crux requires all of the following software.  Once installed, Crux only
requires the Python runtime and any shared libraries that were linked against
during compilation.

* gcc and gfortran (http://gcc.gnu.org/).  gfortran is only used if ATLAS and
  LAPACK need to be built (see below).

* GNU make (http://www.gnu.org/software/make/make.html).

==== Optional software =========================================================

The following software must be pre-installed in order for optional features to
be built in to Crux:

* mpi4py (http://code.google.com/p/mpi4py/).  This is a Cython-based module
  that makes MPI available in Cython/Python code.  mpi4py requires an
  underlying MPI implementation.  One of the following is recommended, since
  they are used during Crux development:

    + MPICH2 (http://www.mcs.anl.gov/research/projects/mpich2/).

    + Open MPI (http://www.open-mpi.org/).

Crux releases include various third-party software and pre-generated files, in
order to streamline the build process for the typical user.  However, if you
build using a Mercurial checkout, or if you need to generate modified outputs,
one or more of the following may be required:

* autoconf (http://www.gnu.org/software/autoconf/autoconf.html).  autoconf
  creates the configure script, based on configure.ac.

* Flex (http://flex.sourceforge.net/).  Flex generates C code that implements
  lexical analyzers.  For example, lib/CxDistMatrixLexer.[ch] are created from
  lib/CxDistMatrixLexer.l .

* Cython (http://cython.org/).  Crux releases include a copy in contrib/cython.
  If using a Mercurial checkout, either install Cython, or place the Cython
  source tree in contrib/cython.

* ATLAS (http://math-atlas.sourceforge.net/).  Crux releases include a copy in
  contrib/atlas.  If using a Mercurial checkout, either make sure ATLAS is
  installed, or place the ATLAS (and LAPACK; see below) sources in contrib/atlas
  (and contrib/lapack).

  ATLAS is "Automatically Tuned Linear Algebra Software", which means that it
  tunes itself to each computer when it is built.  Since pre-built software
  packages must be rather generic in nature, pre-packaged ATLAS libraries are
  not optimally tuned.  For this reason, you are advised to use ATLAS libraries
  that were built on a machine very similar to the one you will run Crux on.

  If your system uses some sort of CPU power saving functionality, disable it
  before building ATLAS.  For example, on Linux, use something like the
  following to disable power saving on all CPUs:

    $ sudo cpufreq-selector -c 0 -g performance
    $ sudo cpufreq-selector -c 1 -g performance
    ...

* LAPACK (http://www.netlib.org/lapack/).  Crux releases include a copy in
  contrib/lapack.  If using a Mercurial checkout, either make sure LAPACK is
  installed, or place the sources in contrib/lapack.

=== Basic installation =========================================================

Building and installing Crux can be as simple as typing the following while in
the root directory of the source tree:

    ./configure
    make
    make install

Note that if ATLAS is not already installed, you need to disable CPU power
saving before building Crux.  See ATLAS notes above for more details.

=== Advanced Configuration =====================================================

The 'configure' script supports numerous options that allow control of which
Python interpreter is used, where Crux is installed, what compiler flags are
used, etc.  Optionally, pass any of the following arguments (not a definitive
list) to 'configure':

--help
    Print a definitive list of options.

--prefix=<install-root-dir>
    Set the base directory in which to install.  For example:

        ./configure --prefix=/usr/local

    will cause files to be installed into /usr/local/bin, /usr/local/share,
    and /usr/local/man.  Note that in order to integrate with Python, Crux
    installs its packages and modules Python's site-packages directory.

--with-python=<path-to-python>
    Use the indicated Python interpreter, rather than using the shell PATH
    to search for Python.

--with-cython=<path-to-cython>
    Use the indicated Cython compiler.  Ordinarily, configure looks for the
    included version in contrib/cython, and if it is missing (as for a
    Mercurial checkout), a usable version is searched for using the shell PATH.

--disable-mpi
    Do not build in MPI support, even if the mpi4py module is available.

--disable-sys-linalg
    Do not use system ATLAS/LAPACK libraries.  Instead, build from the source
    code that is included with Crux releases.  Be sure to read the ATLAS notes
    about disabling CPU power saving during the build.

--enable-debug
    Enable assertions and validation code.  This incurs a substantial
    performance hit, but is very useful when developing scripts (or Crux
    itself).

The following environment variables (not a definitive list) impact configure's
behavior:

CFLAGS="?"
    Pass these flags to the compiler.  You probably shouldn't define this unless
    you know what you are doing.  (Use EXTRA_CFLAGS instead.)

EXTRA_CFLAGS="?"
    Append these flags to CFLAGS.  This makes it possible to add flags such as
    -Werror, while allowing the configure script to determine what other flags
    are appropriate for the specified configuration.

    The configure script specifically checks whether an optimization flag (-O*)
    is specified in EXTRA_CFLAGS, and refrains from specifying an optimization
    level if it finds that one has already been specified.

CPPFLAGS="?"
    Pass these flags to the C preprocessor.  Note that CFLAGS is not passed to
    'cpp' when 'configure' is looking for include files, so you must use
    CPPFLAGS instead if you need to help 'configure' find header files.

LD_LIBRARY_PATH="?"
    'ld' uses this colon-separated list to find libraries.

LDFLAGS="?"
    Pass these flags when linking.

PATH="?"
    'configure' uses this to find programs.

=== Advanced compilation =======================================================

To run integrated regression tests, type:

    make check

The build system places its outputs in the 'build' directory, and creates two
versions.  One of these versions can be run in place, and the other is only
usable once installed in its final location.  In order to run crux in place,
use:

    ./build/run/bin/crux

To re-build the two versions separately, use the following make targets:

    run
    inst

To clean up build results to varying degrees, use the following make targets:

    clean
    distclean
    relclean

=== Advanced installation ======================================================

Optionally, define make variables when invoking make, including (not
exclusively):

BINDIR="?"
    Use this as the installation prefix for programs.

DATADIR="?"
    Use this as the installation prefix for modules and documentation.

MANDIR="?"
    Use this as the installation prefix for man pages.

CC="?"
    Use this to invoke the C compiler.

CFLAGS="?"
    Pass these flags to the compiler.

CPPFLAGS="?"
    Pass these flags to the C preprocessor.

LDFLAGS="?"
    Pass these flags when linking.

PATH="?"
    Use this to search for programs used during configuration and building.

=== Development ================================================================

--- Use autogen.sh instead of configure ---

If you intend to make non-trivial changes to Crux, use the 'autogen.sh' script
rather than 'configure'.  This re-generates 'configure', enables configuration
dependency rules, and enables re-generation of automatically generated source
files, using the optional development software.

--- Separate object directory ---

The build system supports using an object directory separate from the source
tree.  For example, you can create an 'obj' directory, and from within that
directory, issue configuration and build commands:

    autoconf
    mkdir obj
    ../configure --enable-autogen --enable-flex
    make

In practice, using a separate object directory is of limited utility, since the
build system already places most of its outputs in the 'build' directory.

--- Keep cfg.in in sync with configure.ac ---

Since the build system has to generate different versions of various files for
the 'run' versus 'inst' targets, it uses the 'cfg' script to do the @...@
variable replacement that autoconf would normally handle.  Since 'cfg' is itself
generated via autoconf, it must embed a dictionary of variable translations.  In
order to minimize bit rot, 'cfg' does some validation to assure that all
AC_SUBST keys can be translated.  If you add or remove any AC_SUBST macros in
configure.ac, make the equivalent change to cfg.in.

--- cydep is fragile ---

The build system uses 'cydep' to compute transitive .pxd dependencies, so that
it can potentially avoid rebuilding all .pyx sources every time a .pxd file is
modified.  Unfortunately, this is tough to get 100% right, mainly because cydep
can't always find all of the files it needs.  For example, the float.h C header
is stashed in a gcc-internal directory on Linux systems.  Likewise, Cython
searches for .pxd files in an internal directory that cydep does not know about.
For these reasons, cydep emits comments that indicate what files could not be
found during dependency computation.  If you notice that the build system
fails to re-compile an out-of-date Cython source, look in build/pkg/*.d to
verify that cydep picked up all the necessary dependencies, and if you find a
problem, adjust the search paths accordingly.
