print "Test begin"

###
a = Crux.Tree.Tree('(A,(B,C),D);')
print "%.2f" % a.rf(a)

b = Crux.Tree.Tree('(A,(B,C),D);')
print "%.2f" % a.rf(b)

c = Crux.Tree.Tree('(A,B,(C,D));')
print "%.2f" % a.rf(c)

d = Crux.Tree.Tree('(A,B,C,D);')
print "%.2f" % a.rf(d)

print "("
r = a.rfs([a, b, c, d])
for distance in r:
    print "  %.2f" % distance
print ")"

###
a = Crux.Tree.Tree('((A,B),(C,D),(E,F));')
print "%.2f" % a.rf(a)

b = Crux.Tree.Tree('(((A,B),C),D,(E,F));')
print "%.2f" % a.rf(b)

c = Crux.Tree.Tree('(((C,D),A),B,(E,F));')
print "%.2f" % a.rf(c)

d = Crux.Tree.Tree('(((A,C),E),F,(B,D));')
print "%.2f" % a.rf(d)

e = Crux.Tree.Tree('(A,B,C,D,E,F);')
print "%.2f" % a.rf(e)

print "("
r = a.rfs([a, b, c, d, e])
for distance in r:
    print "  %.2f" % distance
print ")"

print "("
r = e.rfs([a, b, c, d, e])
for distance in r:
    print "  %.2f" % distance
print ")"

###
a = Crux.Tree.Tree(';')
b = Crux.Tree.Tree(';')
print "%.2f" % a.rf(b)

###
a = Crux.Tree.Tree('A;')
b = Crux.Tree.Tree('A;')
print "%.2f" % a.rf(b)

###
a = Crux.Tree.Tree('(A,B);')
b = Crux.Tree.Tree('(A,B);')
print "%.2f" % a.rf(b)

###
try:
    a = Crux.Tree.Tree('A;')
    b = Crux.Tree.Tree('(A,B);')
    print "%.2f" % a.rf(b)
except:
    import sys

    error = sys.exc_info()
    print "Exception %s: %s" % (error[0], error[1])

print "Test end"
