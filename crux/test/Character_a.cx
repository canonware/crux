print "Test begin"

#
# Generic Character tests.
#

print "=== Character ==="

states = ['A', 'B', 'C', 'D']
ambiguities = {
  'W': ['A', 'B'],
  'X': ['A', 'B', 'C'],
  'Y': ['C', 'D'],
  'Z': ['A', 'B', 'C', 'D']
}
aliases = {
  'a': 'A',
  'b': 'B',
  'c': 'C',
  'd': 'D'
}

c = Crux.Character.Character(states, ambiguities, aliases)

for code in states:
    val =  c.code2val(code)
    print "%s --> %d" % (code, val)
    print "%s <-- %d" % (c.val2code(val), val)
codes = c.codes()
codes.sort()

for code in ambiguities.keys():
    val =  c.code2val(code)
    print "%s --> %d" % (code, val)
    print "%s <-- %d" % (c.val2code(val), val)
codes = c.codes()
codes.sort()

for code in aliases.keys():
    val =  c.code2val(code)
    print "%s --> %d" % (code, val)
    print "%s <-- %d" % (c.val2code(val), val)
codes = c.codes()
codes.sort()
print "Codes: %r" % codes
print "nstates: %d" % c.nstates()

# Error conditions.
try:
    c = Crux.Character.Character(['A', 'A'])
except:
    import sys

    error = sys.exc_info()
    print "Exception %s: %s" % (error[0], error[1])

try:
    c = Crux.Character.Character(['A', 'B', 'C'], {'A': ['B', 'C']})
except:
    import sys

    error = sys.exc_info()
    print "Exception %s: %s" % (error[0], error[1])

try:
    c = Crux.Character.Character(['A', 'B'], {}, {'A': 'B'})
except:
    import sys

    error = sys.exc_info()
    print "Exception %s: %s" % (error[0], error[1])

try:
    c = Crux.Character.Character(['A'], {}, {'j': 'J'})
except:
    import sys

    error = sys.exc_info()
    print "Exception %s: %s" % (error[0], error[1])

try:
    c = Crux.Character.Character(['A'])
    c.code2val('a')
except:
    import sys

    error = sys.exc_info()
    print "Exception %s: %s" % (error[0], error[1])

try:
    c = Crux.Character.Character(['A'])
    c.val2code(42)
except:
    import sys

    error = sys.exc_info()
    print "Exception %s: %s" % (error[0], error[1])

#
# Dna tests.
#

print "=== Dna ==="
c = Crux.Character.Dna.get()
codes = c.codes()
codes.sort()
print "Codes: %r" % codes
print "nstates: %d" % c.nstates()
for code in codes:
    val =  c.code2val(code)
    print "%s --> 0x%x --> %s" % (code, val, c.val2code(val))

#
# Protein tests.
#
print "=== Protein ==="
c = Crux.Character.Protein.get()
codes = c.codes()
codes.sort()
print "Codes: %r" % codes
print "nstates: %d" % c.nstates()
for code in codes:
    val =  c.code2val(code)
    print "%s --> 0x%08x --> %s" % (code, val, c.val2code(val))

print "Test end"
