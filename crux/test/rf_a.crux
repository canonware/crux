################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Crux <Version = crux>
#
################################################################################

print "Test begin"

taxaMap = Crux.Taxa.Map([Crux.Taxa.taxon(label) for l in
  ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H')])

###
a = Crux.Tree.Tree('(A,(B,C),D);', taxaMap=taxaMap)
print "%.2f" % a.rf(a)

b = Crux.Tree.Tree('(A,(B,C),D);', taxaMap=taxaMap)
print "%.2f" % a.rf(b)

c = Crux.Tree.Tree('(A,B,(C,D));', taxaMap=taxaMap)
print "%.2f" % a.rf(c)

d = Crux.Tree.Tree('(A,B,C,D);', taxaMap=taxaMap)
print "%.2f" % a.rf(d)

print "("
r = a.rf((a, b, c, d))
for distance in r:
    print "  %.2f" % distance
print ")"

###
a = Crux.Tree.Tree('((A,B),(C,D),(E,F));', taxaMap=taxaMap)
print "%.2f" % a.rf(a)

b = Crux.Tree.Tree('(((A,B),C),D,(E,F));', taxaMap=taxaMap)
print "%.2f" % a.rf(b)

c = Crux.Tree.Tree('(((C,D),A),B,(E,F));', taxaMap=taxaMap)
print "%.2f" % a.rf(c)

d = Crux.Tree.Tree('(((A,C),E),F,(B,D));', taxaMap=taxaMap)
print "%.2f" % a.rf(d)

e = Crux.Tree.Tree('(A,B,C,D,E,F);', taxaMap=taxaMap)
print "%.2f" % a.rf(e)

print "("
r = a.rf((a, b, c, d, e))
for distance in r:
    print "  %.2f" % distance
print ")"

print "("
r = e.rf((a, b, c, d, e))
for distance in r:
    print "  %.2f" % distance
print ")"

###
a = Crux.Tree.Tree(';', taxaMap=taxaMap)
b = Crux.Tree.Tree(';', taxaMap=taxaMap)
print "%.2f" % a.rf(b)

###
a = Crux.Tree.Tree('A;', taxaMap=taxaMap)
b = Crux.Tree.Tree('A;', taxaMap=taxaMap)
print "%.2f" % a.rf(b)

###
a = Crux.Tree.Tree('(A,B);', taxaMap=taxaMap)
b = Crux.Tree.Tree('(A,B);', taxaMap=taxaMap)
print "%.2f" % a.rf(b)

###
try:
    a = Crux.Tree.Tree('A;', taxaMap=taxaMap)
    b = Crux.Tree.Tree('(A,B);', taxaMap=taxaMap)
    print "%.2f" % a.rf(b)
except:
    import sys

    error = sys.exc_info()
    print "Exception %s: %s" % (error[0], error[1])

print "Test end"
