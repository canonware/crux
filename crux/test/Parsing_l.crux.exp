Precedences:
  [%fail none ={none} <{}]
  [%split split ={split} <{}]
Tokens:
  <$> [%fail none ={none} <{}]
    First set: [<$>]
    Follow set: []
  <e> [%fail none ={none} <{}]
    First set: [<e>]
    Follow set: []
  a [%fail none ={none} <{}]
    First set: [a]
    Follow set: [<$>, c]
  b [%fail none ={none} <{}]
    First set: [b]
    Follow set: [<$>, c]
  c [%fail none ={none} <{}]
    First set: [c]
    Follow set: [a, b, c]
Non-terminals:
  <S> [%fail none ={none} <{}]
    First set: [a, b]
    Follow set: [<e>]
    Productions:
      <S> ::= S <$>. [none]
  A [%fail none ={none} <{}]
    First set: [c]
    Follow set: [a, b]
    Productions:
      A ::= c C. [none]
  B [%fail none ={none} <{}]
    First set: [c]
    Follow set: [a, b]
    Productions:
      B ::= c c. [none]
  C [%fail none ={none} <{}]
    First set: [c]
    Follow set: [a, b]
    Productions:
      C ::= c. [none]
  S [%fail none ={none} <{}]
    First set: [a, b]
    Follow set: [<$>]
    Productions:
      S ::= a A a. [none]
      S ::= a B b. [none]
      S ::= b A b. [none]
      S ::= b B a. [none]
Item sets:
  0: ItemSet(kernel: [<S> ::= * S <$>., <e>] [none], added: '[S ::= * a B b., <$>] [none], [S ::= * a A a., <$>] [none], [S ::= * b B a., <$>] [none], [S ::= * b A b., <$>] [none]')
  1: ItemSet(kernel: [S ::= a * B b., <$>] [none], [S ::= a * A a., <$>] [none], added: '[A ::= * c C., a] [none], [B ::= * c c., b] [none]')
  2: ItemSet(kernel: [S ::= b * B a., <$>] [none], [S ::= b * A b., <$>] [none], added: '[A ::= * c C., b] [none], [B ::= * c c., a] [none]')
  3: ItemSet(kernel: [<S> ::= S * <$>., <e>] [none], added: '')
  4: ItemSet(kernel: [A ::= c * C., a] [none], [B ::= c * c., b] [none], added: '[C ::= * c., a] [none]')
  5: ItemSet(kernel: [S ::= a A * a., <$>] [none], added: '')
  6: ItemSet(kernel: [S ::= a B * b., <$>] [none], added: '')
  7: ItemSet(kernel: [A ::= c * C., b] [none], [B ::= c * c., a] [none], added: '[C ::= * c., b] [none]')
  8: ItemSet(kernel: [S ::= b A * b., <$>] [none], added: '')
  9: ItemSet(kernel: [S ::= b B * a., <$>] [none], added: '')
  10: ItemSet(kernel: [<S> ::= S <$> *., <e>] [none], added: '')
  11: ItemSet(kernel: [C ::= c *., a] [none], [B ::= c c *., b] [none], added: '')
  12: ItemSet(kernel: [A ::= c C *., a/b] [none], added: '')
  13: ItemSet(kernel: [S ::= a A a *., <$>] [none], added: '')
  14: ItemSet(kernel: [S ::= a B b *., <$>] [none], added: '')
  15: ItemSet(kernel: [C ::= c *., b] [none], [B ::= c c *., a] [none], added: '')
  16: ItemSet(kernel: [S ::= b A b *., <$>] [none], added: '')
  17: ItemSet(kernel: [S ::= b B a *., <$>] [none], added: '')
Parsing.Spec: 4 tokens, 4 non-terminals, 7 productions, 18 states, 22 actions (0 split):
Algorithm compatibility: GLR, LR
Parsing tables:
  ==============================================================================
  State 0: (start state)
           S ::= * a B b. [none]
           S ::= * a A a. [none]
           S ::= * b B a. [none]
           S ::= * b A b. [none]
           <S> ::= * S <$>. [none]
    Goto:
                  S : 3
    Action:
                  a : shift  1 [none]
                  b : shift  2 [none]
  ==============================================================================
  State 1:
           A ::= * c C. [none]
           B ::= * c c. [none]
           S ::= a * B b. [none]
           S ::= a * A a. [none]
    Goto:
                  A : 5
                  B : 6
    Action:
                  c : shift  4 [none]
  ==============================================================================
  State 2:
           A ::= * c C. [none]
           B ::= * c c. [none]
           S ::= b * B a. [none]
           S ::= b * A b. [none]
    Goto:
                  A : 8
                  B : 9
    Action:
                  c : shift  7 [none]
  ==============================================================================
  State 3:
           <S> ::= S * <$>. [none]
    Goto:
    Action:
                <$> : shift  10 [none]
  ==============================================================================
  State 4:
           C ::= * c. [none]
           A ::= c * C. [none]
           B ::= c * c. [none]
    Goto:
                  C : 12
    Action:
                  c : shift  11 [none]
  ==============================================================================
  State 5:
           S ::= a A * a. [none]
    Goto:
    Action:
                  a : shift  13 [none]
  ==============================================================================
  State 6:
           S ::= a B * b. [none]
    Goto:
    Action:
                  b : shift  14 [none]
  ==============================================================================
  State 7:
           C ::= * c. [none]
           A ::= c * C. [none]
           B ::= c * c. [none]
    Goto:
                  C : 12
    Action:
                  c : shift  15 [none]
  ==============================================================================
  State 8:
           S ::= b A * b. [none]
    Goto:
    Action:
                  b : shift  16 [none]
  ==============================================================================
  State 9:
           S ::= b B * a. [none]
    Goto:
    Action:
                  a : shift  17 [none]
  ==============================================================================
  State 10:
            <S> ::= S <$> *. [none]
    Goto:
    Action:
                <e> : reduce <S> ::= S <$>. [none]
  ==============================================================================
  State 11:
            C ::= c *. [none]
            B ::= c c *. [none]
    Goto:
    Action:
                  a : reduce C ::= c. [none]
                  b : reduce B ::= c c. [none]
  ==============================================================================
  State 12:
            A ::= c C *. [none]
    Goto:
    Action:
                  a : reduce A ::= c C. [none]
                  b : reduce A ::= c C. [none]
  ==============================================================================
  State 13:
            S ::= a A a *. [none]
    Goto:
    Action:
                <$> : reduce S ::= a A a. [none]
  ==============================================================================
  State 14:
            S ::= a B b *. [none]
    Goto:
    Action:
                <$> : reduce S ::= a B b. [none]
  ==============================================================================
  State 15:
            C ::= c *. [none]
            B ::= c c *. [none]
    Goto:
    Action:
                  a : reduce B ::= c c. [none]
                  b : reduce C ::= c. [none]
  ==============================================================================
  State 16:
            S ::= b A b *. [none]
    Goto:
    Action:
                <$> : reduce S ::= b A b. [none]
  ==============================================================================
  State 17:
            S ::= b B a *. [none]
    Goto:
    Action:
                <$> : reduce S ::= b B a. [none]
