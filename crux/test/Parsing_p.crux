import sys
import Parsing

global __name__

# Precedences.
class P1(Parsing.Precedence):
    "%left p1"
class p2(Parsing.Precedence):
    "%left >p1"

# Tokens.
class TokenPlus(Parsing.Token):
    "%token plus"
class TokenStar(Parsing.Token):
    "%token star"
class TokenLparen(Parsing.Token):
    "%token lparen"
class TokenRparen(Parsing.Token):
    "%token rparen [p2]"
class TokenId(Parsing.Token):
    "%token id"

class TokenId2(TokenId):
    "%extend id"
    def __init__(self, parser):
        TokenId.__init__(self, parser)
        print "TokenId2 constructor"

# Non-terminal definitions.
class NontermE(Parsing.Nonterm):
    "%start E"
    def reduceA(self, E, plus, T):
        "%reduce E plus T [p1]"
        print "%r ::= %r %r %r" % (self, E, plus, T)

    def reduceB(self, T):
        "%reduce T"
        print "%r ::= %r" % (self, T)

class T(Parsing.Nonterm):
    "%nonterm"
    def reduceA(self, T, star, F):
        "%reduce T star F"
        print "%r ::= %r %r %r" % (self, T, star, F)
    def reduceB(self, F):
        "%reduce F"
        print "%r ::= %r" % (self, F)

class NontermF(Parsing.Nonterm):
    "%nonterm F [p2]"
    def reduceA(self, lparen, E, rparen):
        "%reduce lparen E rparen"
        print "%r ::= %r %r %r" % (self, lparen, E, rparen)
    def reduceB(self, id):
        "%reduce id [split]"
        print "%r ::= %r" % (self, id)

class TestParser(Parsing.Lr):
    def __init__(self, spec):
        Parsing.Lr.__init__(self, spec)

class NontermEa(NontermE):
    "%extend E"
    def reduceB(self, T):
        "%accept"
        print "accept",
        NontermE.reduceB(self, T)

class Ta(T):
    "%extend T"
    def reduceB(self):
        "%suppress"
    def reduceC(self, F):
        "%reduce F"

class Tb(Ta):
    "%extend T"
    def reduceB(self, F):
        "%amend F"
        print "%r ::= %r" % (self, F)
    def reduceC(self):
        "%suppress"

class NontermFa(NontermF):
    "%extend F [split]"
    def reduceA(self, id):
        "%amend id"
        print "%r ::= %r" % (self, id)
    def reduceB(self, lparen, E, rparen):
        "%amend lparen E rparen [p2]"
        print "%r ::= %r %r %r" % (self, lparen, E, rparen)

spec = Parsing.Spec(sys.modules[__name__], startSym=NontermE, skinny=False,
  verbose=True)
print spec
parser = TestParser(spec)

print "Input: id * id + id"
parser.token(TokenId2(parser))
parser.token(TokenStar(parser))
parser.token(TokenId2(parser))
parser.token(TokenPlus(parser))
parser.token(TokenId2(parser))
parser.eoi()

print "Start: %r" % parser.start

