################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Crux <Version = crux>
#
################################################################################

import random
import sys
import os
import tempfile

matrices = ["""     5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 3.000 0.000 1.000
Epsilon    3.000 3.000 3.000 1.000 0.000
""",

"""     5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 3.000 0.000 1.000
Epsilon    3.000 3.000 3.000 1.000 0.000""",

"""5
Taxon_A 0.0 1.0 2.0 3.0 4.0
Taxon_B 1.0 0.0 1.5 2.5 3.5
Taxon_C 2.0 1.5 0.0 2.2 3.2
Taxon_D 3.0 2.5 2.2 0.0 3.1
Taxon_E 4.0 3.5 3.2 3.1 0.0
""",

"""5
Taxon_A     1.0 2.0 3.0 4.0
Taxon_B         1.5 2.5 3.5
Taxon_C             2.2 3.2
Taxon_D                 3.1
Taxon_E
""",

"""5
Taxon_A     1.0 2.0 3.0 4.0
Taxon_B         1.5 2.5 3.5
Taxon_C             2.2 3.2
Taxon_D                 3.1
Taxon_E""",

"""5
Taxon_A
Taxon_B 1.0
Taxon_C 2.0 1.5
Taxon_D 3.0 2.5 2.2
Taxon_E 4.0 3.5 3.2 3.1
""",

"""5
Taxon_A
Taxon_B 1.0
Taxon_C 2.0 1.5
Taxon_D 3.0 2.5 2.2
Taxon_E 4.0 3.5 3.2 3.1""",

"""2
Taxon_A 0.0 1.0
Taxon_B 1.0 0.0
""",

"""2
Taxon_A     1.0
Taxon_B
""",

"""2
Taxon_A
Taxon_B 1.0
""",

"""3
Taxon_A 0.0 1.0 2.0
Taxon_B 1.0 0.0 3.0
Taxon_C 2.0 3.0 0.0
""",

"""3
Taxon_A     1.0 2.0
Taxon_B         3.0
Taxon_C
""",

"""3
Taxon_A
Taxon_B 1.0
Taxon_C 2.0 3.0
""",

"""3
Taxon_A 0.0e4 +1.0e4 -1.0e4
Taxon_B 1e4   +0e4   -1e-4
Taxon_C -1e+4 -1e-4   0E4
""",

#
# Error cases.
#

"""5
Taxon_A 1.0 1.0 2.0 3.0 4.0
Taxon_B 1.0 0.0 1.5 2.5 3.5
Taxon_C 2.0 1.5 0.0 2.2 3.2
Taxon_D 3.0 2.5 2.2 0.0 3.1
Taxon_E 4.0 3.5 3.2 3.1 0.0
""",

"""5
Taxon_A 0.0 1.0 2.0 3.0 4.0
Taxon_B 1.0 1.0 1.5 2.5 3.5
Taxon_C 2.0 1.5 0.0 2.2 3.2
Taxon_D 3.0 2.5 2.2 0.0 3.1
Taxon_E 4.0 3.5 3.2 3.1 0.0
""",

"""5
Taxon_A 0.0 2.0 2.0 3.0 4.0
Taxon_B 1.0 0.0 1.5 2.5 3.5
Taxon_C 2.0 1.5 0.0 2.2 3.2
Taxon_D 3.0 2.5 2.2 0.0 3.1
Taxon_E 4.0 3.5 3.2 3.1 0.0
""",

"""
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 0.000 0.000 1.000
Epsilon    3.000 3.000 3.000 1.000 0.000
""",

"""5
           0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 0.000 0.000 1.000
Epsilon    3.000 3.000 3.000 1.000 0.000
""",

"""5
Alpha            1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 0.000 0.000 1.000
Epsilon    3.000 3.000 3.000 1.000 0.000
""",

"""5
Alpha      0.000 1.000 2.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 0.000 0.000 1.000
Epsilon    3.000 3.000 3.000 1.000 0.000
""",

"""5
Alpha      0.000 1.000 2.000 3.000 3.000
           1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 0.000 0.000 1.000
Epsilon    3.000 3.000 3.000 1.000 0.000
""",

"""5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta             0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 0.000 0.000 1.000
Epsilon    3.000 3.000 3.000 1.000 0.000
""",

"""5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 0.000 0.000 1.000
Epsilon    3.000 3.000 3.000 1.000 0.000
""",

"""5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000
2.000 3.000 
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 0.000 0.000 1.000
Epsilon    3.000 3.000 3.000 1.000 0.000
""",

"""5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 3.000 0.000 1.000
           3.000 3.000 3.000 1.000 0.000
""",

"""5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 3.000 0.000 1.000
Gamma      3.000 3.000 3.000 1.000 0.000
""",

# EOF errors.

"""5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 3.000 0.000 1.000
Epsilon    3.000 3.000 3.000 1.000 
""",

"""     5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 3.000 0.000 1.000
Epsilon    3.000 3.000 3.000
""",

"""     5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 3.000 0.000 1.000
Epsilon    3.000 3.000 3.000""",

"""     5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 3.000 0.000 1.000
""",

"""     5
Alpha      0.000 1.000 2.000 3.000 3.000
Beta       1.000 0.000 2.000 3.000 3.000
Gamma      2.000 2.000 0.000 3.000 3.000
Delta      3.000 3.000 3.000 0.000 1.000""",

"""5
Taxon_A     1.0 2.0 3.0 4.0
Taxon_B         1.5 2.5 3.5
Taxon_C             2.2 3.2
Taxon_D                 3.1
""",

"""5
Taxon_A     1.0 2.0 3.0 4.0
Taxon_B         1.5 2.5 3.5
Taxon_C             2.2 3.2
Taxon_D                 3.1""",

"""5
Taxon_A     1.0 2.0 3.0 4.0
Taxon_B         1.5 2.5 3.5
Taxon_C             2.2 3.2
""",

"""5
Taxon_A
Taxon_B 1.0
Taxon_C 2.0 1.5
Taxon_D 3.0 2.5 2.2
Taxon_E 4.0 3.5 3.2
""",

"""5
Taxon_A
Taxon_B 1.0
Taxon_C 2.0 1.5
Taxon_D 3.0 2.5 2.2
Taxon_E 4.0 3.5 3.2""",

"""5
Taxon_A
Taxon_B 1.0
Taxon_C 2.0 1.5
Taxon_D 3.0 2.5 2.2
"""
            ]

# Re-seed the PRNG so that test results are repeatable.
random.seed(42)

print "Test begin"

for matrix in matrices:
    try:
        print "==="
        print matrix
        distMatrix = Crux.DistMatrix.DistMatrix(matrix)
        distMatrix.render('full', '%.5f')
        print
        distMatrix.render('upper', '%.5f')
        print
        distMatrix.render('lower', '%.5f')
        print
        if distMatrix.ntaxa > 2:
            print "--- sampled"
            sDistMatrix = Crux.DistMatrix.DistMatrix(distMatrix,
              sampleSize=distMatrix.ntaxa-1)
            sDistMatrix.render('lower', '%.5f')
        print "--- shuffled"
        distMatrix.shuffle()
        distMatrix.render('lower', '%.5f')
        print
    except:
        import sys
#        import traceback

        error = sys.exc_info()
        print "Exception %s: %s" % (error[0], error[1])
#        for l in traceback.format_exception(*error):
#            print l,

for matrix in matrices:
    try:
        print "==="
        print matrix
        f = tempfile.TemporaryFile()
        f.write(matrix)
        f.seek(0, 0)
        distMatrix = Crux.DistMatrix.DistMatrix(f)
        distMatrix.render(format='full', distFormat='%.5f')
        print
        distMatrix.render(distFormat='%.5f')
        print
    except:
        import sys
#        import traceback

        error = sys.exc_info()
        print "Exception %s: %s" % (error[0], error[1])
#        for l in traceback.format_exception(*error):
#            print l,

try:
    print "==="
    taxaMap = Crux.Taxa.Map([Crux.Taxa.get(label) for label in
      ('A', 'B', 'C')])
    distMatrix = Crux.DistMatrix.DistMatrix(taxaMap)
    distMatrix.render('full', '%.5f')
    print
except:
    import sys
#    import traceback

    error = sys.exc_info()
    print "Exception %s: %s" % (error[0], error[1])
#    for l in traceback.format_exception(*error):
#        print l,

print "Test end"
