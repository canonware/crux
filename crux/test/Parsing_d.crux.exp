Precedences:
  [%fail none ={none} <{}]
  [%left p1 ={p1} <{p2}]
  [%left p2 ={p2} <{}]
  [%split split ={split} <{}]
Tokens:
  <$> [%fail none ={none} <{}]
    First set: [<$>]
    Follow set: []
  <e> [%fail none ={none} <{}]
    First set: [<e>]
    Follow set: []
  id [%fail none ={none} <{}]
    First set: [id]
    Follow set: [<$>, plus, star]
  plus [%left p1 ={p1} <{p2}]
    First set: [plus]
    Follow set: [id]
  star [%left p2 ={p2} <{}]
    First set: [star]
    Follow set: [id]
Non-terminals:
  <S> [%fail none ={none} <{}]
    First set: [id]
    Follow set: [<e>]
    Productions:
      <S> ::= S <$>. [none]
  E [%fail none ={none} <{}]
    First set: [id]
    Follow set: [<$>, plus, star]
    Productions:
      E ::= E plus E. [p1]
      E ::= E star E. [p2]
      E ::= id. [none]
  S [%fail none ={none} <{}]
    First set: [id]
    Follow set: [<$>]
    Productions:
      S ::= E. [none]
Item sets:
  0: ItemSet(kernel: [<S> ::= * S <$>., <e>] [none], added: '[S ::= * E., <$>] [none], [E ::= * id., <$>/star/plus] [none], [E ::= * E plus E., <$>/star/plus] [p1], [E ::= * E star E., <$>/star/plus] [p2]')
  1: ItemSet(kernel: [E ::= id *., <$>/star/plus] [none], added: '')
  2: ItemSet(kernel: [<S> ::= S * <$>., <e>] [none], added: '')
  3: ItemSet(kernel: [S ::= E *., <$>] [none], [E ::= E * plus E., <$>/star/plus] [p1], [E ::= E * star E., <$>/star/plus] [p2], added: '')
  4: ItemSet(kernel: [<S> ::= S <$> *., <e>] [none], added: '')
  5: ItemSet(kernel: [E ::= E plus * E., <$>/star/plus] [p1], added: '[E ::= * id., <$>/star/plus] [none], [E ::= * E plus E., <$>/star/plus] [p1], [E ::= * E star E., <$>/star/plus] [p2]')
  6: ItemSet(kernel: [E ::= E star * E., <$>/star/plus] [p2], added: '[E ::= * id., <$>/star/plus] [none], [E ::= * E plus E., <$>/star/plus] [p1], [E ::= * E star E., <$>/star/plus] [p2]')
  7: ItemSet(kernel: [E ::= E * plus E., <$>/star/plus] [p1], [E ::= E * star E., <$>/star/plus] [p2], [E ::= E plus E *., <$>/star/plus] [p1], added: '')
  8: ItemSet(kernel: [E ::= E * plus E., <$>/star/plus] [p1], [E ::= E * star E., <$>/star/plus] [p2], [E ::= E star E *., <$>/star/plus] [p2], added: '')
Parsing.Spec: 4 tokens, 2 non-terminals, 4 productions, 9 states, 17 actions (0 split):
Algorithm compatibility: GLR, LR
Parsing tables:
  ==============================================================================
  State 0: (start state)
           S ::= * E. [none]
           E ::= * id. [none]
           E ::= * E plus E. [p1]
           E ::= * E star E. [p2]
           <S> ::= * S <$>. [none]
    Goto:
                  E : 3
                  S : 2
    Action:
                 id : shift  1 [none]
  ==============================================================================
  State 1:
           E ::= id *. [none]
    Goto:
    Action:
                <$> : reduce E ::= id. [none]
               plus : reduce E ::= id. [none]
               star : reduce E ::= id. [none]
  ==============================================================================
  State 2:
           <S> ::= S * <$>. [none]
    Goto:
    Action:
                <$> : shift  4 [none]
  ==============================================================================
  State 3:
           S ::= E *. [none]
           E ::= E * plus E. [p1]
           E ::= E * star E. [p2]
    Goto:
    Action:
                <$> : reduce S ::= E. [none]
               plus : shift  5 [p1]
               star : shift  6 [p2]
  ==============================================================================
  State 4:
           <S> ::= S <$> *. [none]
    Goto:
    Action:
                <e> : reduce <S> ::= S <$>. [none]
  ==============================================================================
  State 5:
           E ::= * id. [none]
           E ::= * E plus E. [p1]
           E ::= * E star E. [p2]
           E ::= E plus * E. [p1]
    Goto:
                  E : 7
    Action:
                 id : shift  1 [none]
  ==============================================================================
  State 6:
           E ::= * id. [none]
           E ::= * E plus E. [p1]
           E ::= * E star E. [p2]
           E ::= E star * E. [p2]
    Goto:
                  E : 8
    Action:
                 id : shift  1 [none]
  ==============================================================================
  State 7:
           E ::= E * plus E. [p1]
           E ::= E * star E. [p2]
           E ::= E plus E *. [p1]
    Goto:
    Action:
                <$> : reduce E ::= E plus E. [p1]
               plus : reduce E ::= E plus E. [p1]
               star : shift  6 [p2]
  ==============================================================================
  State 8:
           E ::= E * plus E. [p1]
           E ::= E * star E. [p2]
           E ::= E star E *. [p2]
    Goto:
    Action:
                <$> : reduce E ::= E star E. [p2]
               plus : reduce E ::= E star E. [p2]
               star : reduce E ::= E star E. [p2]
Input: id * id + id * id
E ::= id
E ::= id
E ::= E star E
E ::= id
E ::= id
E ::= E star E
E ::= E plus E
S ::= E
Start: [S]
