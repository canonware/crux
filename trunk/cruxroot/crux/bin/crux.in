#!python

import crux

import sys
import os
import string
import time
import re
import random
import optparse

# Create a help formatter subclass for the command line parser.
class CruxHelpFormatter(optparse.IndentedHelpFormatter):
    def format_usage(self, usage):
        return """crux usage:
    crux -h | --help
    crux --version
    crux [<options>]

    Option               | Description
    ---------------------+-----------------------------------------------
    -h | --help          | Print usage and exit (no*).
    --version            | Print version information and exit (no*).
    --batch              | Run in batch mode (interactive*).
    --quiet              | Enable quiet output (non-quiet*).
    --seed=<int>         | Specify random number generator seed (time*).
    --infile=<file>      | Read input <file> (stdin*).
    --outfile=<file>     | Save results to <file> (stdout*).
    --logfile=<file>     | Output a copy of all output to <file> (none*).
    -- [<scriptargs>]    | Provide <scriptargs> arguments to script."""

# Process the command line.
def parse_options():
    helpformatter = CruxHelpFormatter()
    parser = optparse.OptionParser(formatter=helpformatter, add_help_option=0)
    parser.add_option("-h", "--help", dest="help", action="store_true",
                      default=False)
    parser.add_option("--version", dest="version", action="store_true",
                      default=False)
    parser.add_option("--quiet", dest="quiet", action="store_true",
                      default=False)
    parser.add_option("--batch", dest="batch", action="store_true",
                      default=False)
    parser.add_option("--seed", dest="seed", type="int", default=None)
    parser.add_option("--infile", dest="infile", default=None)
    parser.add_option("--outfile", dest="outfile", default=None)
    parser.add_option("--logfile", dest="logfile", default=None)
    parser.add_option("--__execed", dest="execed", action="store_true",
                      default=False)

    (opts, scriptargs) = parser.parse_args()
    opts.scriptargs = scriptargs

    if opts.help:
        print helpformatter.format_usage("")
        sys.exit(0)

    if opts.version:
        print "Crux, version @crux_version@"
        sys.exit(0)

    return opts

#
# Beginning of main execution.
#

# Parse command line options.
opts = parse_options()

if not opts.batch and not opts.execed:
    # Precursor to interactive mode.
    #
    # In order for interactive command line editing to work in its full glory,
    # it is necessary to exec the python interpreter, such that interactive mode
    # is enabled via python's '-i' flag.
    args = sys.argv[:]
    args.insert(0, "-i")
    args.append("--__execed")

    # For some reason, PYTHONINSPECT must be set, even when '-i' is passed to
    # the python interpreter.
    os.environ['PYTHONINSPECT'] = '1'

    # Re-launch python.
    os.execv("@PYTHON@", args)
    # Not reached.

# Seed the pseudo-random number generator.
if opts.seed == None:
    opts.seed = int(time.time())
random.seed(opts.seed)

# Print various info, if in quiet mode.
if not opts.quiet:
    print "Crux, version @crux_version@"

    print "Start batch processing, %s" \
          % time.strftime("%Y/%m/%d %H:%M:%S (%Z)",
                          time.localtime(time.time()))

    if opts.batch:
        print "Batch mode"
    else:
        print "Interactive mode"

    print "Process ID: %d" % os.getpid()

    print "Random number seed: %d" % opts.seed

    if opts.infile == None:
        print "Input file: <stdin>"
    else:
        print "Input file: '%s'" % opts.infile

    if opts.outfile == None:
        print "Output file: <stdout>"
    else:
        print "Output file: '%s'" % opts.outfile

    if opts.logfile != None:
        print "Log file: '%s'" % opts.logfile
    if len(opts.scriptargs) != 0:
        print "Script argument(s): %s" % opts.scriptargs

# Do batch processing.
if opts.infile != None:
    execfile(opts.infile)
elif opts.batch:
    exec(os.stdin)

# Print various info, if in quiet mode.
if not opts.quiet:
    print "Stop batch processing, %s" \
          % time.strftime("%Y/%m/%d %H:%M:%S (%Z)",
                          time.localtime(time.time()))
    if not opts.batch:
        print "Interactive mode."
