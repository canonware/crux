/* -*- mode: c ; c-file-style: "canonware-c-style" -*-
 ******************************************************************************
 *
 * <Copyright = jasone>
 * <License>
 *
 ******************************************************************************
 *
 * Version: Crux <Version = crux>
 *
 ******************************************************************************/

typedef struct cw_tr_s cw_tr_t;
typedef struct cw_trn_s cw_trn_t;

/* cw_trs_t contains a space-efficient representation of an unrooted bifurcating
 * phylogenetic tree.  The feasible duration of each iteration of tabu search is
 * bounded by the number of trees (and assoicated tabu lists) that can be
 * stored.  As such, the internal tree representation is as compact as
 * reasonably possible.
 *
 * Since tabu search depends on being able to determine if a tree has been
 * previously visited, tree comparison must be fast.  Therefore, a canonical
 * form is defined for trees.  Since the internal representation is effectively
 * string, it can be used as the input to a string hashing function, which makes
 * searching for a specific tree among previously visited trees a constant time
 * operation.
 *
 * A tree is stored in parenthetical form, generated by doing an in-order
 * traversal, starting at the first taxon, and ordering subtrees (left vs right)
 * according to which subtree has the lowest-numbered taxon.  The leaf node to
 * taxon mapping is stored as an ordered list that corresponds to the order in
 * which leaves are visited during the aforementioned in-order traversal.  The
 * first taxon (effectively the root) is left out of the list, since its
 * position is always the same.
 *
 * The parentheses are represented as a string of bits, where 0 is `(', and 1 is
 * `)'.
 *
 * The taxon list can be thought of as a series of permutations, where element i
 *             / n - i \
 * represents: |       |.  As the number of choices decreases, so does the
 *             \   1   /
 * number of bits that are necessary to distinguish among the choices.
 *
 * The following example is in canonical form:
 *
 *            A           C
 *             \         /
 *              \       /
 *               \     /
 *                \   /
 *                 \ /
 *                  V
 *                  |
 *                  |
 *                  |
 *                  |
 *                  |
 *                 / \
 *                /   \
 *               /     \
 *              /       \
 *   F---------/         \---------B
 *             |         |
 *             |         |
 *             |         |
 *             |         |
 *             |         |
 *             D         E
 *
 * Doing an in-order traversal of the tree results in the following expression:
 *
 *   (((BE)(DF))C)
 *
 * The topology for this tree can be represented by the following bit string:
 *
 *   ((()()))
 *   00010111
 *
 * The taxon visitation order can be represented by the following bit string
 * (keep in mind that only as many bits as are necessary are used for each
 * element):
 *
 *   A  B  E D F C
 *   - 00 10 1 1 -
 *
 * The `-' characters represent implicit information (A always comes first, and
 * 1 choose 1 is always the same).
 *
 * In general, the number of bytes that are needed to store a tree can be
 * calculated via the following formula:
 *
 *   __                          __
 *   |           n-2              |
 *   |          ____  __       __ |
 *   |          \     |         | |
 *   | 2(n-3) +  >    |log (n-i)| |
 *   |          /___  |   2     | |
 *   |           i=0              |
 *   | -------------------------- |
 *   |              8             |
 *   |                            |
 *
 * The first term in the numerator corresponds to the parenthetical expression,
 * and the summation term corresponds to the taxon permutation.
 *
 * In summary, a tree is represented by a parenthetical expression, immediately
 * followed by the taxon visitation order permutation.  The number of taxa in
 * the tree is implied by the parenthetical expression, and a well known taxon
 * ordering is assumed.
 * 
 */
typedef cw_uint8_t * cw_trs_t;

cw_trs_t *
trs_new(cw_trs_t *a_trs, cw_tr_t *a_tr);

void
trs_delete(cw_trs_t *a_trs);

void
trs_tr(cw_trs_t *a_trs, cw_tr_t *a_tr);

/* An internal node, used by cw_tr_t. */
struct cw_trn_s
{
#ifdef CW_DBG
    cw_uint32_t magic;
#define CW_TRN_MAGIC 0x63329478
#endif
};

/* cw_tr_t contains a time-efficient representation of an unrooted bifurcating
 * phlyogenetic tree.  This data structure takes much more space than cw_trs_t
 * does, but tree operations are much more efficient than they would be for
 * cw_trs_t. */
struct cw_tr_s
{
#ifdef CW_DBG
    cw_uint32_t magic;
#define CW_TR_MAGIC 0x37d478a3
#endif

};
